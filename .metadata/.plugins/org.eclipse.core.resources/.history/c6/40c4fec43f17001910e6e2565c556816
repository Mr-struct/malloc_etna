/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cours.calcul;

/**
 *
 * @author elhad
 */
public class Calculation implements ICalculation {

	@Override
	public int addition(int value1, int value2) {
		return value1 + value2;
	}

	/**
	 * initialise un tableau de taille "taille" de manier aléatoire
	 * @param taille 
	 * @return myArray
	 */
	@Override
	public int[] initMyArray(int taille) {
		if (taille <= 0) {
			System.err.println("Erreur, taille du tableau négative ou égale à 0");
			return null;
		}
		int[] myArray = new int[taille];

		for(int i = 0; i < taille ; i++) {
			myArray[i] = (int) (Math.random() * taille) + 1;
		}
		return myArray;
	}
	
	/**
	 * Trie un tableau d'entier
	 * @param  arrayToSort
	 * @return arraySorted
	 */
	@Override
	public int[] sortMyArray(int[] arrayToSort) {
		int[] arraySorted = null;

		for(int i = 0 ; i < arrayToSort.length; i++) {
			int min = i;
			for(int j = i + 1; j < arrayToSort.length; j++) {
				if( arrayToSort[j] < arrayToSort[min]) {
					min = j;
				}
			}

				if(min != i) {
					int temp =  arrayToSort[i] ;
					arrayToSort[i]  = arrayToSort[min];
					arrayToSort[min] =  temp ;
				}
		}
		arraySorted = arrayToSort;

		return arraySorted;
	}

	@Override
	/**
	 * Calcule de factoriel itterative
	 * @param number
	 * @return factoriel
	 */
	public int factorielItterative(int number) {
		int factoriel = 1;
		while(number != 0) {
			factoriel = factoriel * number;
			number--;
		}
		return factoriel;
	}

	@Override
	/**
	 * Calcule de factoriel recursive non terminal
	 * @param number
	 * @return factoriel
	 */
	public int factorielRecursive(int number) {
		if(number < 1) {
			return 1;
		}
		return factorielRecursive(number - 1) * number;
	}

	/**
	 * renvois 0 si les deux chaines de caractères sont identiques, 1 si la
	 * premiere chaine est supérieur à la seconde chaine (en terme de code
	 * ASCII), -1 si la premiere chaine est inférieur à la seconde chaine (en
	 * terme de code ASCII)
	 *
	 * @param firstChaine
	 * @param secondeChaine
	 * @return result
	 */
	@Override
	public int compareChaines(String firstChaine, String secondeChaine) {
		int result = 0;
		int lenght1 = firstChaine.length();
		int lenght2 = secondeChaine.length();
		int weightCharFirstChine = 0;
		int weightCharSecondeChaine = 0;

		if(lenght1 == lenght2) {

			for(int i = 0; i < lenght1; i++) {
				weightCharFirstChine += Character.getNumericValue(firstChaine.charAt(i));
				weightCharSecondeChaine += Character.getNumericValue(secondeChaine.charAt(i));
			}

			if (weightCharFirstChine > weightCharSecondeChaine) {

				result = 1;
			} else {

				if (weightCharFirstChine < weightCharSecondeChaine) {
					result = -1;
				}
			}
		} else
			if(lenght1 > lenght2) {
				result = 1; 
			} else  {
				if (lenght1 < lenght2) {
					result = -1;
				}
			}
		return result;
	}

	/**
	 * renvois 0 si le nombre est égale à 0, 1 s’il est pair et positif, 2 s’il
	 * est négatif et paire, 3 s’il est impair et positif et 4 s’il est négatif
	 * et impair
	 *
	 * @param chaine
	 * @return result
	 */
	@Override
	public int verifyParite(String chaine) {
		int result = -1;
		Integer number = 0;
		
		try {
			if(chaine.equals("0")) {
				result = 0;
			}else {
				number = Integer.parseInt(chaine);
			}
		} catch (Exception e) {
			System.err.println("[" + chaine + "]" + "n'est pas un entier " + e.getMessage());
			result = -1;
		}

		if( number != 0) {
			if (isPaire(number)) {
				if(isPositif(number)) {
					result = 1;
				} else {
					result = 2;
				}
			} else {
				if(isPositif(number)) {
					return 3;
				}
				else {
					result = 4;
				}
			}
		}

		return result;
	}

	/**
	 * retourne le max plus le min d'un tabealu diviser par deux
	 * @param array
	 * @return integer
	 */
	@Override
	public int nombreMagique(int[] array) {
		int min  = array[0];
		int max =  array[0];
		for(int i = 1; i < array.length ; i++) {
			if(max < array[i]) {
				max = array[i];
			}
			if (min > array[i]) {
				min = array[i];
			}
		}
		return ((max + min ) / 2);
	}

	/**
	 * renvoie vrai si value est paire, faux sinon
	 * @param value
	 * @return boolean 
	 */
	@Override
	public boolean isPaire(int value) {

		return (value % 2 == 0);
	}

	/**
	 * renvoie vrai si value est positif, faux sinon
	 * @param value
	 * @return boolean
	 */
	@Override
	public boolean isPositif(int value) {
		return (value > 0);
	}
	
	@Override
	public void displayArray(int[] array) {
		System.out.println("displayArray :Debut affichage du tableau");
		for (int i = 0; i < array.length; i ++) {
			System.out.println("arry[" + i + "] = " + array[i]);
		}
		System.out.println("displayArray :Fin affichage du tableau");

	}

}
