/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cours.process;

import com.cours.entities.Animal;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 *
 * @author elhad
 */
public class ProcessAnimal implements IProcessAnimal {

	private static final Log log = LogFactory.getLog(ProcessAnimal.class);
	private List<Animal> animals = null;
	private final DateFormat dateFormat =  new SimpleDateFormat("dd/MM/yyyy");

	@Override
	public List<Animal> loadAnimalsManually() {
		animals = new ArrayList<Animal>();
		try {
			animals.add(new Animal(1, "Lion", 200.0,dateFormat.parse("10/10/2000"),"Marron", 4,true));
			animals.add(new Animal(2, "Elephant", 400.0,dateFormat.parse("10/10/2001"),"Gris", 4,true));
			animals.add(new Animal(3, "Tigre", 200.0,dateFormat.parse("10/10/2002"),"Orange", 4,true));
			animals.add(new Animal(4, "Requin", 500.0,dateFormat.parse("10/10/2003"),"Blanc", 4,true));
			animals.add(new Animal(5, "Chat", 5.0,dateFormat.parse("10/10/2004"),"Noir", 4,true));
			animals.add(new Animal(6, "Mouton", 50.0,dateFormat.parse("10/10/2005"),"Noir", 4,true));
			animals.add(new Animal(7, "Chevre", 50.0,dateFormat.parse("10/10/2006"),"Gris", 4,true));
			animals.add(new Animal(8, "Poule", 3.0,dateFormat.parse("10/10/2007"),"Rousse", 4,true));
			animals.add(new Animal(9, "Porc", 200.0,dateFormat.parse("10/10/2008"),"Rose", 4,true));
			animals.add(new Animal(10, "Singe", 80.0,dateFormat.parse("10/10/2009"),"Gris", 4,true));
			animals.add(new Animal(11, "Giraffe", 300.0,dateFormat.parse("10/10/2010"),"Marron et Noir", 4,true));


		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return animals;
	}

	@Override
	public List<Animal> loadAnimalsFile() {
		File file = new File("animaux.txt");
		FileReader fileReader  = null;
		animals = new ArrayList<Animal>();
		try {
			fileReader = new FileReader(file.getAbsolutePath());
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		BufferedReader buffer = new BufferedReader(fileReader);
		String getLines = "";
		try {
			while((getLines = buffer.readLine()) != null) {

				String [] strTab = getLines.split(",");
				Date dateNaissance = dateFormat.parse(strTab[3].trim());
				animals.add(new Animal(Integer.parseInt(strTab[0].trim()),
						strTab[1].trim(),
						Integer.parseInt(strTab[2].trim()),
						dateNaissance,
						strTab[4].trim(),
						Integer.parseInt(strTab[5].trim()),
						Boolean.parseBoolean(strTab[6].trim())
						));

			}
		} catch (IOException | ParseException e ) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		//		for(Animal anim : animals) {
		//			System.out.println(anim.toString());
		//		}
		return animals;
	}

	@Override
	public Double calculMoyennePoidsAnimaux() {
		double total = 0.0;
		double sommePoid = 0.0;
		//loadAnimalsFile();
		for(Animal animal : this.animals) {
			sommePoid += animal.getPoids();
		}
		total = (sommePoid/this.animals.size());
		System.out.println(total);
		return total;
	}

	@Override
	public Double calculEcartTypePoidsAnimaux() {
		double sommeCarrePoids = 0.0;
		double moyenPoids = this.calculMoyennePoidsAnimaux();
		for(Animal animal : animals) {
			sommeCarrePoids = (sommeCarrePoids + animal.getPoids()) * (sommeCarrePoids + animal.getPoids()) ;
		}
		
		return (sommeCarrePoids/2) - (moyenPoids*moyenPoids);
	}

	@Override
	public List<Animal> sortAnimalsById() {
		return null;
	}

	@Override
	public List<Animal> sortAnimalsByName() {
		return null;
	}

	@Override
	public List<Animal> sortAnimalsByWeight() {
		return null;
	}

	@Override
	public List<Animal> sortAnimalsByColor() {
		return null;
	}

	@Override
	public void generateFileByName() {
	}

	@Override
	public void generateFileByWeight() {
	}

	@Override
	public List<Animal> getAnimals() {
		return animals;
	}
}
